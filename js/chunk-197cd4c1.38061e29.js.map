{"version":3,"sources":["webpack:///./src/components/week3/ex-component.vue?0ce7","webpack:///./src/components/week3/ex-component.vue?b9a2","webpack:///./src/components/week3/ex-component.vue?b3f1","webpack:///./src/components/week3/ex-component.vue?336b","webpack:///./src/scripts/week3/utils.ts","webpack:///./src/components/week3/ex-component.vue?d578","webpack:///./node_modules/big.js/big.js","webpack:///./src/scripts/week3/ex1.ts"],"names":["render","_vm","this","_h","$createElement","_c","_self","_v","_s","title","validInputExplanation","directives","name","rawName","value","expression","modifiers","domProps","on","$event","target","composing","input","trim","$forceUpdate","staticClass","doCalculate","doTest","result","staticRenderFns","calculate","replaceAll","test","required","type","String","Function","component","tokenize","validOperators","tokens","index","length","isNaN","readOperator","token","idx","push","readNumber","unshift","num","times","plus","decimal","div","includes","GLOBAL","Big","DP","RM","MAX_DP","MAX_POWER","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","_Big_","n","x","s","e","c","slice","parse","constructor","prototype","version","i","nl","Error","charAt","indexOf","replace","search","substring","round","dp","rm","more","xc","pop","stringify","id","k","z","join","abs","cmp","y","isneg","yc","j","l","a","b","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","d","shift","eq","gt","gte","lt","lte","minus","sub","t","xlty","xe","ye","reverse","mod","ygtx","add","pow","one","sqrt","half","Math","toExponential","mul","Array","toFixed","toPrecision","sd","toString","valueOf","toJSON","mainEx1","ans","newTokens","calculateMultiplicationAndDivision","calculateAdditionAndSubtraction","newTokenValue"],"mappings":"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","file":"js/chunk-197cd4c1.38061e29.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h2',[_vm._v(_vm._s(_vm.title))]),_c('div',[_vm._v(_vm._s(_vm.validInputExplanation))]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.trim\",value:(_vm.input),expression:\"input\",modifiers:{\"trim\":true}}],domProps:{\"value\":(_vm.input)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.input=$event.target.value.trim()},\"blur\":function($event){return _vm.$forceUpdate()}}}),_c('br'),_c('button',{staticClass:\"button\",on:{\"click\":_vm.doCalculate}},[_vm._v(\"計算\")]),_c('button',{staticClass:\"button\",on:{\"click\":_vm.doTest}},[_vm._v(\"テスト\")]),_c('div',[_vm._v(\"結果: \"+_vm._s(_vm.result))])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Vue, Component, Prop } from 'vue-property-decorator'\nimport { Big } from 'big.js'\n\n@Component({\n  name: 'ExComponent',\n})\nexport default class extends Vue {\n  @Prop({ required: true, type: String }) title!: string\n  @Prop({ required: true, type: String }) validInputExplanation!: string\n  @Prop({ required: true, type: Function }) calculate!: (\n    input: string\n  ) => Big | 'error'\n  @Prop({ required: true, type: Function }) test!: () => 'OK' | 'NG'\n\n  input = ''\n  result: string | Big = ''\n\n  doCalculate() {\n    this.result = this.calculate(\n      this.input.replaceAll(' ', '').replaceAll('　', '')\n    )\n  }\n\n  doTest() {\n    this.result = this.test()\n  }\n}\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/ts-loader/index.js??ref--13-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ex-component.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/ts-loader/index.js??ref--13-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ex-component.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./ex-component.vue?vue&type=template&id=10968784&scoped=true&\"\nimport script from \"./ex-component.vue?vue&type=script&lang=ts&\"\nexport * from \"./ex-component.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./ex-component.vue?vue&type=style&index=0&id=10968784&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"10968784\",\n  null\n  \n)\n\nexport default component.exports","import { Big } from 'big.js'\nimport { Token, Operator } from './type'\n\n/** 入力を Token 型の配列に変換 */\nexport const tokenize = (input: string, validOperators: Operator[]) => {\n  const tokens: Token[] = []\n  let index = 0\n  while (index < input.length) {\n    if (!isNaN(+input[index])) {\n      const { token, idx } = readNumber(input, index)\n      if (token === null) return null\n      tokens.push(token)\n      index = idx\n    } else {\n      const { token, idx } = readOperator(input, index, validOperators)\n      if (token === null) return null\n      // 演算子が不正に連続していたらエラー\n      if (tokens.length > 0) {\n        if (\n          tokens[tokens.length - 1] === '(' &&\n          !(token === '-' || token === '(')\n        )\n          return null\n\n        if (\n          isNaN(+tokens[tokens.length - 1]) &&\n          tokens[tokens.length - 1] !== ')' &&\n          token === ')'\n        )\n          return null\n\n        if (\n          (tokens[tokens.length - 1] === '+' ||\n            tokens[tokens.length - 1] === '-' ||\n            tokens[tokens.length - 1] === '*' ||\n            tokens[tokens.length - 1] === '/') &&\n          (token === '+' || token === '-' || token === '*' || token === '/')\n        )\n          return null\n      }\n\n      tokens.push(token)\n      index = idx\n    }\n  }\n\n  // 数字か ) で式が終わっていなかったらエラー\n  if (isNaN(+tokens[tokens.length - 1]) && tokens[tokens.length - 1] !== ')')\n    return null\n\n  if (tokens[0] !== '-') tokens.unshift('+') // ダミーの + を挿入\n\n  return tokens\n}\n\n/** 数字読み込み */\nconst readNumber = (input: string, idx: number) => {\n  // 1 未満の数以外で 0 から始まっていたらエラー\n  if (+input[idx] === 0 && idx + 1 < input.length && !isNaN(+input[idx + 1])) {\n    const token = null\n    return { token, idx }\n  }\n  let num = new Big(0)\n  /** 整数部分読み込み */\n  while (idx < input.length && !isNaN(+input[idx])) {\n    num = num.times(10).plus(+input[idx])\n    idx += 1\n  }\n  /** 小数部分読み込み */\n  if (input[idx] == '.') {\n    let decimal = new Big(0.1)\n    idx += 1\n    // 小数点以下に数字が無かったらエラー\n    if (idx >= input.length || isNaN(+input[idx])) {\n      const token = null\n      return { token, idx }\n    }\n    while (idx < input.length && !isNaN(+input[idx])) {\n      num = decimal.times(+input[idx]).plus(num)\n      decimal = decimal.div(10)\n      idx += 1\n    }\n  }\n  const token = num\n  return { token, idx }\n}\n\n/** 演算子の読み込み */\nconst readOperator = (\n  input: string,\n  idx: number,\n  validOperators: Operator[]\n) => {\n  if (validOperators.includes(input[idx] as Operator)) {\n    const token = input[idx] as Operator\n    idx += 1\n    return { token, idx }\n  }\n  const token = null\n  idx += 1\n  return { token, idx }\n}\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ex-component.vue?vue&type=style&index=0&id=10968784&scoped=true&lang=css&\"","/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,          // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big.\r\n     * (This limit is not enforced or checked.)\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        parse(x, n);\r\n      }\r\n\r\n      /*\r\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n       * points to Object.\r\n       */\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.version = '5.2.2';\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    // Minus zero?\r\n    if (n === 0 && 1 / n < 0) n = '-0';\r\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by stringify, P.div, P.round and P.sqrt.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, dp, rm, more) {\r\n    var xc = x.c,\r\n      i = x.e + dp + 1;\r\n\r\n    if (i < xc.length) {\r\n      if (rm === 1) {\r\n\r\n        // xc[i] is the digit after the digit that may be rounded up.\r\n        more = xc[i] >= 5;\r\n      } else if (rm === 2) {\r\n        more = xc[i] > 5 || xc[i] == 5 &&\r\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n      } else if (rm === 3) {\r\n        more = more || !!xc[0];\r\n      } else {\r\n        more = false;\r\n        if (rm !== 0) throw Error(INVALID_RM);\r\n      }\r\n\r\n      if (i < 1) {\r\n        xc.length = 1;\r\n\r\n        if (more) {\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          x.e = -dp;\r\n          xc[0] = 1;\r\n        } else {\r\n\r\n          // Zero.\r\n          xc[0] = x.e = 0;\r\n        }\r\n      } else {\r\n\r\n        // Remove any digits after the required decimal places.\r\n        xc.length = i--;\r\n\r\n        // Round up?\r\n        if (more) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up.\r\n          for (; ++xc[i] > 9;) {\r\n            xc[i] = 0;\r\n            if (!i--) {\r\n              ++x.e;\r\n              xc.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; !xc[--i];) xc.pop();\r\n      }\r\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   *\r\n   * x {Big}\r\n   * id? {number} Caller id.\r\n   *         1 toExponential\r\n   *         2 toFixed\r\n   *         3 toPrecision\r\n   *         4 valueOf\r\n   * n? {number|undefined} Caller's argument.\r\n   * k? {number|undefined}\r\n   */\r\n  function stringify(x, id, n, k) {\r\n    var e, s,\r\n      Big = x.constructor,\r\n      z = !x.c[0];\r\n\r\n    if (n !== UNDEFINED) {\r\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n      }\r\n\r\n      x = new Big(x);\r\n\r\n      // The index of the digit that may be rounded up.\r\n      n = k - x.e;\r\n\r\n      // Round?\r\n      if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n      if (id == 2) k = x.e + n + 1;\r\n\r\n      // Append zeros?\r\n      for (; x.c.length < k;) x.c.push(0);\r\n    }\r\n\r\n    e = x.e;\r\n    s = x.c.join('');\r\n    n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) for (e -= n; e--;) s += '0';\r\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n  */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) return new Big(k * 0);\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n    q.s = k;\r\n    k = d < 0 ? 0 : d;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n\r\n      // y is non-zero? x is non-zero? Or both are zero.\r\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    a = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (b) {\r\n      xc.unshift(b);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor(1),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n   * multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\r\n  P.round = function (dp, rm) {\r\n    var Big = this.constructor;\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big(0.5);\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s);\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, Big.DP -= 4, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = (c[j] + b) % 10;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   */\r\n  P.toExponential = function (dp) {\r\n    return stringify(this, 1, dp, dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp) {\r\n    return stringify(this, 2, dp, this.e + dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\r\n  P.toPrecision = function (sd) {\r\n    return stringify(this, 3, sd, sd - 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toString = function () {\r\n    return stringify(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return stringify(this, 4);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n","import { Big } from 'big.js'\nimport { Token } from './type'\nimport * as utils from './utils'\n\nexport const mainEx1 = (input: string) => {\n  const tokens = utils.tokenize(input.trim(), ['+', '-', '*', '/'])\n  if (tokens === null) return 'error'\n  const ans = calculate(tokens)\n  return ans\n}\n\n/** () が無い式の計算 */\nexport const calculate = (tokens: Token[]) => {\n  const newTokens = calculateMultiplicationAndDivision(tokens)\n  if (newTokens === null) return 'error'\n  const ans = calculateAdditionAndSubtraction(newTokens)\n  return ans\n}\n\n/** 掛け算と割り算のみ計算 */\nconst calculateMultiplicationAndDivision = (tokens: Token[]) => {\n  const newTokens: Token[] = []\n  for (let i = 0; i < tokens.length; i += 2) {\n    if (tokens[i] === '+' || tokens[i] === '-') {\n      newTokens.push(tokens[i])\n      newTokens.push(tokens[i + 1])\n      continue\n    }\n    if (tokens[i] === '*') {\n      const newTokenValue = newTokens[newTokens.length - 1] as Big\n      newTokens[newTokens.length - 1] = newTokenValue.times(+tokens[i + 1])\n    }\n    if (tokens[i] === '/') {\n      if (+tokens[i + 1] === 0) return null // 0 で割る割り算はエラー\n      const newTokenValue = newTokens[newTokens.length - 1] as Big\n      newTokens[newTokens.length - 1] = newTokenValue.div(+tokens[i + 1])\n    }\n  }\n  return newTokens\n}\n\n/** 足し算と引き算のみの式を計算する */\nconst calculateAdditionAndSubtraction = (tokens: Token[]) => {\n  let ans = new Big(0)\n  for (let i = 0; i < tokens.length; i += 2) {\n    if (tokens[i] === '+') {\n      ans = ans.plus(+tokens[i + 1])\n    }\n    if (tokens[i] === '-') {\n      ans = ans.minus(+tokens[i + 1])\n    }\n  }\n  return ans\n}\n"],"sourceRoot":""}